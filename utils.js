// Generated by CoffeeScript 1.8.0
(function() {
  var fs, parse, pth;

  fs = require('fs');

  pth = require('path');

  parse = require('miff').parse;

  exports.load = function(directory) {
    var content, e, file, path, ret, _i, _len, _ref;
    ret = {};
    _ref = fs.readdirSync(directory);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      path = pth.join(directory, file);
      content = fs.readFileSync(path, {
        encoding: 'utf8'
      });
      try {
        parse(content, {
          equal: true
        }, ret);
      } catch (_error) {
        e = _error;
        throw new Error("" + e.message + " in " + path);
      }
    }
    return ret;
  };

  exports.findBestMatch = function(accepts, available) {
    var lang, _i, _j, _len, _len1;
    for (_i = 0, _len = accepts.length; _i < _len; _i++) {
      lang = accepts[_i];
      if (lang in available) {
        return lang;
      }
    }
    accepts = accepts.map(function(x) {
      return x.split('-');
    }).filter(function(x) {
      return x.length > 1;
    }).map(function(_arg) {
      var x;
      x = _arg[0];
      return x;
    });
    for (_j = 0, _len1 = accepts.length; _j < _len1; _j++) {
      lang = accepts[_j];
      if (lang in available) {
        return lang;
      }
    }
  };

  exports.getAcceptLanguage = function(header) {
    if (!header) {
      return [];
    }
    return header.split(',').map(function(item) {
      var lang, q, _ref;
      _ref = item.split(';'), lang = _ref[0], q = _ref[1];
      return lang.trim();
    });
  };

}).call(this);
