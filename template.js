// Generated by CoffeeScript 1.8.0
(function() {
  var Template,
    __slice = [].slice;

  Template = (function() {
    function Template(template) {
      var char, escape, i, token, type, _i, _ref;
      this.template = template;
      if (!this.template) {
        throw new Error("template is empty");
      }
      this.tokens = [];
      this.types = [];
      token = '';
      type = 0;
      escape = false;
      for (i = _i = 0, _ref = this.template.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        char = this.template.charAt(i);
        if (escape) {
          escape = false;
          token += char;
        } else if ('\\' === char) {
          escape = true;
        } else if ('{' === char) {
          if (type === 1) {
            throw new Error("unclosed curly brackets in '" + this.template + "'");
          }
          if (token) {
            this.tokens.push(token);
            this.types.push(type);
          }
          token = '';
          type = 1;
        } else if ('}' === char) {
          if (type === 0) {
            throw new Error("unmatched curly brackets '" + this.template + "'");
          }
          if (token) {
            this.tokens.push(token);
            this.types.push(type);
          }
          token = '';
          type = 0;
        } else {
          token += char;
        }
      }
      if (token) {
        this.tokens.push(token);
        this.types.push(type);
      }
      if (type === 1) {
        throw new Error("unclosed curly brackets '" + this.template + "'");
      }
      this.len = this.types.length;
    }

    Template.prototype.render = function() {
      var i, positionalvars, ret, vars, _i, _ref, _ref1;
      vars = arguments[0], positionalvars = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      ret = '';
      for (i = _i = 0, _ref = this.len; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.types[i] === 0) {
          ret += this.tokens[i];
        } else {
          if (vars && this.tokens[i] in vars) {
            ret += vars[this.tokens[i]];
          } else if ((0 < (_ref1 = +this.tokens[i]) && _ref1 <= positionalvars.length)) {
            ret += positionalvars[+this.tokens[i] - 1];
          } else {
            throw new Error("var '" + this.tokens[i] + "' missing, required in '" + this.template + "'");
          }
        }
      }
      return ret;
    };

    return Template;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Template;
  } else {
    return Template;
  }

}).call(this);
