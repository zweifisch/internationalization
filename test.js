// Generated by CoffeeScript 1.8.0
(function() {
  var Template, chai, expect, findBestMatch, getAcceptLanguage, parse, _ref;

  chai = require('chai');

  chai.should();

  expect = chai.expect;

  parse = require('./parser').parse;

  Template = require('./template');

  _ref = require('./index'), getAcceptLanguage = _ref.getAcceptLanguage, findBestMatch = _ref.findBestMatch;

  describe('parse', function() {
    it('should turn lines into a dict', function() {
      var source;
      source = "key=value";
      return parse(source).should.deep.equal({
        key: 'value'
      });
    });
    it('should allow white space in key and value', function() {
      var source;
      source = "key=value\nk e y= v a l";
      return parse(source).should.deep.equal({
        key: 'value',
        'k e y': 'v a l'
      });
    });
    it('should escape', function() {
      var source;
      source = "key\\==value=";
      return parse(source).should.deep.equal({
        'key=': 'value='
      });
    });
    it('should parse chinese', function() {
      var source;
      source = "key = 钥匙";
      return parse(source).should.deep.equal({
        'key': '钥匙'
      });
    });
    return it('should skip empty line', function() {
      return parse('').should.deep.equal({});
    });
  });

  describe('template', function() {
    it('should support named vars', function() {
      var t;
      t = new Template("{key} is {value}");
      return t.render({
        key: 'true',
        value: 'false'
      }).should.equal('true is false');
    });
    it('should complain when var missing', function() {
      var t;
      t = new Template("{key} is {value}");
      return expect(function() {
        return t.render({
          key: 'true'
        });
      }).to["throw"](Error);
    });
    it('should support positional vars', function() {
      var t;
      t = new Template("{2} is {1}");
      return t.render(null, 'true', 'false').should.equal('false is true');
    });
    it('should escape', function() {
      var t;
      t = new Template("\\{key\\} is {value}\\\\");
      return t.render({
        key: 'true',
        value: 'false'
      }).should.equal('{key} is false\\');
    });
    return it('should complain when curly bracket not matched', function() {
      expect(function() {
        return new Template("{{key}");
      }).to["throw"](Error);
      expect(function() {
        return new Template("{key}}");
      }).to["throw"](Error);
      expect(function() {
        return new Template("key}");
      }).to["throw"](Error);
      expect(function() {
        return new Template("}key");
      }).to["throw"](Error);
      expect(function() {
        return new Template("{key");
      }).to["throw"](Error);
      return expect(function() {
        return new Template("key{");
      }).to["throw"](Error);
    });
  });

  describe('header parsing', function() {
    return it('should parse header', function() {
      return getAcceptLanguage('da, en-gb;q=0.8, en;q=0.7').should.deep.equal(['da', 'en-gb', 'en']);
    });
  });

  describe('misc', function() {
    return it('should find best match', function() {
      findBestMatch(['da', 'en-gb', 'en'], {
        'da': true,
        'en-gb': true
      }).should.equal('da');
      findBestMatch(['da', 'en-gb', 'en'], {
        'en-gb': true
      }).should.equal('en-gb');
      findBestMatch(['da', 'en-gb', 'en'], {
        'en': true
      }).should.equal('en');
      return findBestMatch(['da', 'en-gb'], {
        'en': true
      }).should.equal('en');
    });
  });

}).call(this);
