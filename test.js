// Generated by CoffeeScript 1.8.0
(function() {
  var chai, expect;

  chai = require('chai');

  chai.should();

  expect = chai.expect;

  describe('template', function() {
    var Template;
    Template = require('./template');
    it('should support named vars', function() {
      var t;
      t = new Template("{key} is {value}");
      return t.render({
        key: 'true',
        value: 'false'
      }).should.equal('true is false');
    });
    it('should complain when var missing', function() {
      var t;
      t = new Template("{key} is {value}");
      return expect(function() {
        return t.render({
          key: 'true'
        });
      }).to["throw"](Error);
    });
    it('should support positional vars', function() {
      var t;
      t = new Template("{2} is {1}");
      return t.render(null, 'true', 'false').should.equal('false is true');
    });
    it('should escape', function() {
      var t;
      t = new Template("\\{key\\} is {value}\\\\");
      return t.render({
        key: 'true',
        value: 'false'
      }).should.equal('{key} is false\\');
    });
    return it('should complain when curly bracket not matched', function() {
      expect(function() {
        return new Template("{{key}");
      }).to["throw"](Error);
      expect(function() {
        return new Template("{key}}");
      }).to["throw"](Error);
      expect(function() {
        return new Template("key}");
      }).to["throw"](Error);
      expect(function() {
        return new Template("}key");
      }).to["throw"](Error);
      expect(function() {
        return new Template("{key");
      }).to["throw"](Error);
      return expect(function() {
        return new Template("key{");
      }).to["throw"](Error);
    });
  });

  describe('header parsing', function() {
    var getAcceptLanguage;
    getAcceptLanguage = require('./utils').getAcceptLanguage;
    return it('should parse header', function() {
      return getAcceptLanguage('da, en-gb;q=0.8, en;q=0.7').should.deep.equal(['da', 'en-gb', 'en']);
    });
  });

  describe("translate", function() {
    var Translator;
    Translator = require("./translator").Translator;
    it("should find key under namespace", function() {
      var translator;
      translator = new Translator();
      translator.langs = {
        en: {
          ns: {
            key: "value"
          }
        }
      };
      translator.translate("en", "ns:key").should.equal("value");
      translator = new Translator(".");
      translator.langs = {
        en: {
          ns: {
            key: "value"
          }
        }
      };
      return translator.translate("en", "ns.key").should.equal("value");
    });
    it("should render template", function() {
      var translator;
      translator = new Translator();
      translator.langs = {
        en: {
          positional: "second is {2}, first is {1}",
          named: "key is {key}, value is {value}",
          mixed: "value is {value}, first is {1}"
        }
      };
      translator.translate("en", "positional", "first", "second").should.equal("second is second, first is first");
      translator.translate("en", "named", {
        key: "key",
        value: "value"
      }).should.equal("key is key, value is value");
      return translator.translate("en", "mixed", {
        value: "value"
      }, "first").should.equal("value is value, first is first");
    });
    return it("should find closest", function() {
      var translator;
      translator = new Translator();
      translator.langs = {
        'da': true,
        'en-gb': true
      };
      translator["try"](['da', 'en-gb', 'en']).should.equal('da');
      translator.langs = {
        'en-gb': true
      };
      translator["try"](['da', 'en-gb', 'en']).should.equal('en-gb');
      translator.langs = {
        en: true
      };
      translator["try"](['da', 'en-gb', 'en']).should.equal('en');
      translator.langs = {
        en: true
      };
      return translator["try"](['da', 'en-gb']).should.equal('en');
    });
  });

}).call(this);
