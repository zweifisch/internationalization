// Generated by CoffeeScript 1.8.0
(function() {
  var Template, debug, findBestMatch, fs, getAcceptLanguage, langs, load, loadSingle, middleware, parse, path, templateCache, translate, translatePlural,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  Template = require('./template');

  parse = require('./parser').parse;

  debug = require('debug')('i18n');

  langs = {};

  templateCache = {};

  loadSingle = function(directory) {
    var content, e, file, pth, ret, _i, _len, _ref;
    ret = {};
    _ref = fs.readdirSync(directory);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      pth = path.join(directory, file);
      content = fs.readFileSync(pth, {
        encoding: 'utf8'
      });
      try {
        parse(content, ret);
      } catch (_error) {
        e = _error;
        throw new Error("" + e.message + " in " + pth);
      }
    }
    return ret;
  };

  load = function(directory) {
    var subdir, _i, _len, _ref, _results;
    _ref = fs.readdirSync(directory);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subdir = _ref[_i];
      _results.push(langs[subdir] = loadSingle(path.join(directory, subdir)));
    }
    return _results;
  };

  getAcceptLanguage = function(header) {
    return header.split(',').map(function(item) {
      var lang, q, _ref;
      _ref = item.split(';'), lang = _ref[0], q = _ref[1];
      return lang.trim();
    });
  };

  findBestMatch = function(accepts, available) {
    var lang, _i, _j, _len, _len1;
    for (_i = 0, _len = accepts.length; _i < _len; _i++) {
      lang = accepts[_i];
      if (lang in available) {
        return lang;
      }
    }
    accepts = accepts.map(function(x) {
      return x.split('-');
    }).filter(function(x) {
      return x.length > 1;
    }).map(function(_arg) {
      var x;
      x = _arg[0];
      return x;
    });
    for (_j = 0, _len1 = accepts.length; _j < _len1; _j++) {
      lang = accepts[_j];
      if (lang in available) {
        return lang;
      }
    }
  };

  translate = function() {
    var key, lang, template, vars, _ref, _ref1;
    lang = arguments[0], key = arguments[1], vars = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    template = ((_ref = langs[lang]) != null ? _ref[key] : void 0) || key;
    if (!vars.length) {
      return template;
    }
    if (!template in templateCache) {
      templateCache[template] = new Template(template);
    }
    if ('object' === typeof vars[0]) {
      return templateCache[template].render(vars[0], vars.slice(1));
    } else {
      return (_ref1 = templateCache[template]).render.apply(_ref1, vars);
    }
  };

  translatePlural = function(lang, key, keyPlural, count, vars) {
    if (count === 1) {
      return translate(lang, key, vars, count);
    } else {
      return translate(lang, keyPlural, vars, count);
    }
  };

  middleware = function(_arg) {
    var cookie, directory, fallback, _langs;
    cookie = _arg.cookie, directory = _arg.directory, fallback = _arg.fallback;
    if (!directory) {
      throw new Error("you hava to specify direcotory for locales");
    }
    if (cookie == null) {
      cookie = 'lang';
    }
    load(directory);
    _langs = Object.keys(langs);
    if (_langs.length) {
      debug("languages loaded: " + _langs);
    } else {
      debug("no languages loaded");
    }
    _langs = void 0;
    return function(req, res, next) {
      var lang;
      if (req.query['set-lang']) {
        lang = req.query['set-lang'];
        debug("language preference from query " + lang);
      } else {
        lang = req.cookies[cookie];
        if (lang) {
          debug("language preference from cookie " + lang);
        }
      }
      if (!(lang in langs)) {
        debug("accept language " + req.headers['accept-language']);
        lang = req.headers['accept-language'] ? findBestMatch(getAcceptLanguage(req.headers['accept-language']), langs) : void 0;
        if (lang) {
          debug("accept language intepreted as " + lang);
        } else {
          lang = fallback;
          debug("fallback to " + lang);
        }
      }
      res.locals._ = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return translate.apply(null, [lang].concat(__slice.call(args)));
      };
      res.locals.__ = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return translatePlural.apply(null, [lang].concat(__slice.call(args)));
      };
      req.lang = lang;
      if (lang && req.cookies[cookie] !== lang) {
        res.cookie(cookie, lang, {
          maxAge: 31536000000
        });
      }
      debug("lang " + lang);
      return next();
    };
  };

  module.exports = {
    load: load,
    middleware: middleware,
    translate: translate,
    translatePlural: translatePlural,
    getAcceptLanguage: getAcceptLanguage,
    findBestMatch: findBestMatch
  };

}).call(this);
